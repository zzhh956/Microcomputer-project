	ORG 0000H
	AJMP MAIN
	ORG 000BH
	LJMP INTERRUPT
	ORG 0050H
	
	;P0, P1 點陣圖
	;P2 鍵盤

;========設初值=========

MAIN:
	MOV DPTR, #TETRIS	;紀錄產生方塊
	
	CLR RS0		;儲存落下方塊
	CLR RS1	
	MOV R0, #00H
	MOV R1, #00000010B
	MOV R2, #00001110B
	MOV R3, #00H
	MOV R4, #00H
	MOV R5, #00H
	MOV R6, #00H
	MOV R7, #00H

	SETB RS0	;儲存當前方塊
    CLR RS1
	MOV R0, #00H
	MOV R1, #00H
	MOV R2, #00H
	MOV R3, #00H
	MOV R4, #00H
	MOV R5, #00H
	MOV R6, #00H
	MOV R7, #00H
	
	SETB RS0	;儲存其他資訊
	SETB RS1
	MOV R0, #01H	;紀錄亮第幾行
	
	MOV TMOD, #1
	SETB ET0
	SETB PT0
	CLR TF0
	MOV R1, #5	;50ms * 8 = 400ms
	MOV TL0, #176	;(65536-50ms/1us)%256
	MOV TH0, #60	;(65536-50ms/1us)/256
	SETB EA
	SETB TR0
	
	MOV R2, #00H	;決定新方塊

;========矩陣燈顯示=========

CON_SHOW:
	SETB RS0
	SETB RS1
	MOV P0, #0	;將點陣圖清除
	ACALL DELAY
	ACALL SHOW_TERIS7
	MOV P0, R0		;決定第幾行亮
	ACALL DELAY
	SETB RS0
	SETB RS1
	MOV A, R0		;設定為亮下一行
	RL A
	MOV R0, A
	CJNE R0, #32, CON_SHOW	;看是否五行都亮完了
	MOV R0, #01H	
	AJMP ROW1
	AJMP CON_SHOW

SHOW_TERIS7:	
	SETB RS0	;當前方塊
	CLR RS1
	MOV A, R7
	SETB RS0
	SETB RS1
	ANL A, R0
	MOV B, A	;先儲存當前結果
	
	CLR RS0		;落下方塊
	CLR RS1
	MOV A, R7
	SETB RS0
	SETB RS1
	ANL A, R0
	CLR RS0
	CLR RS1
	MOV R0, B
	ORL A, R0
	ACALL TRIGHT
	RL A

SHOW_TERIS6:
	PUSH ACC
	SETB RS0	;當前方塊
	CLR RS1
	MOV A, R6
	SETB RS0
	SETB RS1
	ANL A, R0
	MOV B, A	;先儲存當前結果
	
	CLR RS0		;落下方塊
	CLR RS1
	MOV A, R6
	SETB RS0
	SETB RS1
	ANL A, R0
	CLR RS0
	CLR RS1
	MOV R0, B
	ORL A, R0
	ACALL TRIGHT
	MOV B, A
	POP ACC
	ADD A, B
	RL A

SHOW_TERIS5:
	PUSH ACC
	SETB RS0	;當前方塊
	CLR RS1
	MOV A, R5
	SETB RS0
	SETB RS1
	ANL A, R0
	MOV B, A	;先儲存當前結果
	
	CLR RS0		;落下方塊
	CLR RS1
	MOV A, R5
	SETB RS0
	SETB RS1
	ANL A, R0
	CLR RS0
	CLR RS1
	MOV R0, B
	ORL A, R0
	ACALL TRIGHT
	MOV B, A
	POP ACC
	ADD A, B
	RL A

SHOW_TERIS4:
	PUSH ACC
	SETB RS0	;當前方塊
	CLR RS1
	MOV A, R4
	SETB RS0
	SETB RS1
	ANL A, R0
	MOV B, A	;先儲存當前結果
	
	CLR RS0		;落下方塊
	CLR RS1
	MOV A, R4
	SETB RS0
	SETB RS1
	ANL A, R0
	CLR RS0
	CLR RS1
	MOV R0, B
	ORL A, R0
	ACALL TRIGHT
	MOV B, A
	POP ACC
	ADD A, B
	RL A

SHOW_TERIS3:
	PUSH ACC
	SETB RS0	;當前方塊
	CLR RS1
	MOV A, R3
	SETB RS0
	SETB RS1
	ANL A, R0
	MOV B, A	;先儲存當前結果
	
	CLR RS0		;落下方塊
	CLR RS1
	MOV A, R3
	SETB RS0
	SETB RS1
	ANL A, R0
	CLR RS0
	CLR RS1
	MOV R0, B
	ORL A, R0
	ACALL TRIGHT
	MOV B, A
	POP ACC
	ADD A, B
	RL A

SHOW_TERIS2:
	PUSH ACC
	SETB RS0	;當前方塊
	CLR RS1
	MOV A, R2
	SETB RS0
	SETB RS1
	ANL A, R0
	MOV B, A	;先儲存當前結果
	
	CLR RS0		;落下方塊
	CLR RS1
	MOV A, R2
	SETB RS0
	SETB RS1
	ANL A, R0
	CLR RS0
	CLR RS1
	MOV R0, B
	ORL A, R0
	ACALL TRIGHT
	MOV B, A
	POP ACC
	ADD A, B
	RL A

SHOW_TERIS1:
	PUSH ACC
	SETB RS0	;當前方塊
	CLR RS1
	MOV A, R1
	SETB RS0
	SETB RS1
	ANL A, R0
	MOV B, A	;先儲存當前結果
	
	CLR RS0		;落下方塊
	CLR RS1
	MOV A, R1
	SETB RS0
	SETB RS1
	ANL A, R0
	CLR RS0
	CLR RS1
	MOV R0, B
	ORL A, R0
	ACALL TRIGHT
	MOV B, A
	POP ACC
	ADD A, B
	MOV P1, A	;顯示
	
	RET

TRIGHT:
	JZ RETURN_1
	RR A
	CJNE A, #1, TRIGHT

RETURN_1:
	RET
	
DD:	
	LJMP CON_SHOW

;========鍵盤控制========

ROW1:			;掃鍵盤
	SETB RS0
	SETB RS1
	
    MOV P2, #01111111B
    ACALL DELAY
    MOV A, P2
    ANL A, #00001111B
    MOV R2, #0
    CJNE A, #00001111B, COL1

ROW2:
    MOV P2, #10111111B
    ACALL DELAY
    MOV A, P2
    ANL A, #00001111B
    MOV R2, #1
    CJNE A, #00001111B, COL1

ROW3:
    MOV P2, #11011111B
    ACALL DELAY
    MOV A, P2
    ANL A, #00001111B
    MOV R2, #2
    CJNE A, #00001111B, COL1

ROW4:
    MOV P2, #11101111B
    ACALL DELAY
    MOV A, P2
    ANL A, #00001111B
    MOV R2, #3
    CJNE A, #00001111B, COL1
    LJMP CON_SHOW
	
COL1:
    CJNE A, #00001110B, COL2
    MOV R3, #0
    JMP BUTTON

COL2:
    CJNE A, #00001101B, COL3
    MOV R3, #4
    JMP BUTTON

COL3:
    CJNE A, #00001011B, DD
    MOV R3, #8

BUTTON:
	MOV A, R2	;判斷按哪個鍵
    ADD A, R3
	
	MOV R2, A	;上
	XRL A, #1
    JZ ROTATE
	
	MOV R2, A	;左
	XRL A, #4
    JZ LEFT
	
	MOV R2, A	;右
	XRL A, #6
    JZ RIGHT
	
	MOV R2, A	;下
	XRL A, #9
    JZ ACCELATION
	
	LJMP CON_SHOW
	
ROTATE:
	
	
LEFT:
	ACALL LBOUNDRY
	LJMP CON_SHOW
	
RIGHT:	
	ACALL RBOUNDRY
	LJMP CON_SHOW

ACCELATION:
	SETB RS0
	SETB RS1
	MOV R1, #5
	LJMP CON_SHOW

LB7:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_L7
	LCALL CHECK_L6
	LCALL CHECK_L5
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_3
	
	CLR RS0
	CLR RS1
	MOV A, R6
	RR A
	MOV R6, A
	
	MOV A, R5
	RR A
	MOV R5, A
	
	MOV A, R4
	RR A
	MOV R4, A
	
	RET

LBOUNDRY:
	CLR RS0
	CLR RS1
	
	MOV A, R6
	JNZ LB7
	
	MOV A, R5
	JNZ LB6
	
	MOV A, R4
	JNZ LB5
	
	MOV A, R3
	JNZ LB4
	
	MOV A, R2
	JNZ LB3
	
	RET

RETURN_3:
	RET

LB6:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_L6
	LCALL CHECK_L5
	LCALL CHECK_L4
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_3
	
	CLR RS0
	CLR RS1
	MOV A, R5
	RR A
	MOV R5, A
	
	MOV A, R4
	RR A
	MOV R4, A
	
	MOV A, R3
	RR A
	MOV R3, A
	
	RET

LB5:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_L5
	LCALL CHECK_L4
	LCALL CHECK_L3
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_3
	
	CLR RS0
	CLR RS1
	MOV A, R4
	RR A
	MOV R4, A
	
	MOV A, R3
	RR A
	MOV R3, A
	
	MOV A, R2
	RR A
	MOV R2, A
	
	RET
	
LB4:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_L4
	LCALL CHECK_L3
	LCALL CHECK_L2
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_3
	
	CLR RS0
	CLR RS1
	MOV A, R3
	RR A
	MOV R3, A
	
	MOV A, R2
	RR A
	MOV R2, A
	
	MOV A, R1
	RR A
	MOV R1, A
	
	RET

LB3:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_L3
	LCALL CHECK_L2
	LCALL CHECK_L1
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_3
	
	CLR RS0
	CLR RS1
	MOV A, R2
	RR A
	MOV R2, A
	
	MOV A, R1
	RR A
	MOV R1, A
	
	MOV A, R0
	RR A
	MOV R0, A
	
	RET

CHECK_L7:
	CLR RS0
	CLR RS1	
	MOV A, R6
	ANL A, #1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	MOV A, R6
	RR A
	SETB RS0
	CLR RS1
	ANL A, R6
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_L6:
	CLR RS0
	CLR RS1
	MOV A, R5
	ANL A, #1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	MOV A, R5
	RR A
	SETB RS0
	CLR RS1
	ANL A, R5
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET

CHECK_L5:
	CLR RS0
	CLR RS1
	MOV A, R4
	ANL A, #1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	MOV A, R4
	RR A
	SETB RS0
	CLR RS1
	ANL A, R4
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET

RETURN_4:
	RET

CHECK_L4:
	CLR RS0
	CLR RS1
	MOV A, R3
	ANL A, #1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	MOV A, R3
	RR A
	SETB RS0
	CLR RS1
	ANL A, R3
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_L3:
	CLR RS0
	CLR RS1
	MOV A, R2
	ANL A, #1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	MOV A, R2
	RR A
	SETB RS0
	CLR RS1
	ANL A, R2
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_L2:
	CLR RS0
	CLR RS1
	MOV A, R1
	ANL A, #1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	MOV A, R1
	RR A
	SETB RS0
	CLR RS1
	ANL A, R1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_L1:
	CLR RS0
	CLR RS1
	MOV A, R0
	ANL A, #1
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	MOV A, R0
	RR A
	SETB RS0
	CLR RS1
	ANL A, R5
	JNZ RETURN_4
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
RB7:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_R7
	LCALL CHECK_R6
	LCALL CHECK_R5
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_5
	
	CLR RS0
	CLR RS1
	MOV A, R6
	RL A
	MOV R6, A
	
	MOV A, R5
	RL A
	MOV R5, A
	
	MOV A, R4
	RL A
	MOV R4, A
	
	RET

RBOUNDRY:
	CLR RS0
	CLR RS1
	
	MOV A, R6
	JNZ RB7
	
	MOV A, R5
	JNZ RB6
	
	MOV A, R4
	JNZ RB5
	
	MOV A, R3
	JNZ RB4
	
	MOV A, R2
	JNZ RB3
	
	RET

RETURN_5:
	RET

RB6:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_R6
	LCALL CHECK_R5
	LCALL CHECK_R4
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_5
	
	CLR RS0
	CLR RS1
	MOV A, R5
	RL A
	MOV R5, A
	
	MOV A, R4
	RL A
	MOV R4, A
	
	MOV A, R3
	RL A
	MOV R3, A
	
	RET

RB5:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_R5
	LCALL CHECK_R4
	LCALL CHECK_R3
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_5
	
	CLR RS0
	CLR RS1
	MOV A, R4
	RL A
	MOV R4, A
	
	MOV A, R3
	RL A
	MOV R3, A
	
	MOV A, R2
	RL A
	MOV R2, A
	
	RET

RB4:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_R4
	LCALL CHECK_R3
	LCALL CHECK_R2
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_5
	
	CLR RS0
	CLR RS1
	MOV A, R3
	RL A
	MOV R3, A
	
	MOV A, R2
	RL A
	MOV R2, A
	
	MOV A, R1
	RL A
	MOV R1, A
	
	RET

RB3:
	CLR RS0
	CLR RS1
	MOV R7, #3
	LCALL CHECK_L3
	LCALL CHECK_L2
	LCALL CHECK_L1
	CLR RS0
	CLR RS1
	DJNZ R7, RETURN_5
	
	CLR RS0
	CLR RS1
	MOV A, R2
	RL A
	MOV R2, A
	
	MOV A, R1
	RL A
	MOV R1, A
	
	MOV A, R0
	RL A
	MOV R0, A
	
	RET

CHECK_R7:
	CLR RS0
	CLR RS1	
	MOV A, R6
	ANL A, #1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	MOV A, R6
	RL A
	SETB RS0
	CLR RS1
	ANL A, R6
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_R6:
	CLR RS0
	CLR RS1
	MOV A, R5
	ANL A, #1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	MOV A, R5
	RL A
	SETB RS0
	CLR RS1
	ANL A, R5
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET

CHECK_R5:
	CLR RS0
	CLR RS1
	MOV A, R4
	ANL A, #1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	MOV A, R4
	RL A
	SETB RS0
	CLR RS1
	ANL A, R4
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET

RETURN_6:
	RET

CHECK_R4:
	CLR RS0
	CLR RS1
	MOV A, R3
	ANL A, #1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	MOV A, R3
	RL A
	SETB RS0
	CLR RS1
	ANL A, R3
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_R3:
	CLR RS0
	CLR RS1
	MOV A, R2
	ANL A, #1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	MOV A, R2
	RL A
	SETB RS0
	CLR RS1
	ANL A, R2
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_R2:
	CLR RS0
	CLR RS1
	MOV A, R1
	ANL A, #1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	MOV A, R1
	RL A
	SETB RS0
	CLR RS1
	ANL A, R1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET
	
CHECK_R1:
	CLR RS0
	CLR RS1
	MOV A, R0
	ANL A, #1
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	MOV A, R0
	RL A
	SETB RS0
	CLR RS1
	ANL A, R5
	JNZ RETURN_6
	
	CLR RS0
	CLR RS1
	DEC R7
	
	RET

;========中斷=========

INTERRUPT:
	CLR TF0
	MOV TL0, #176	;(65536-50ms/1us)%256
	MOV TH0, #60	;(65536-50ms/1us)/256
	SETB RS0
	SETB RS1
	DJNZ R1, RETURN_2
	SETB RS0
	SETB RS1
	MOV R1, #8	;50ms * 8 = 400ms	
	ACALL CHECK_COLLISION	;確認下方是否有方塊

	RETI

RETURN_2:
	RETI

UPDATE:
	CLR RS0		;沒方塊，將方塊往下移
	CLR RS1
	MOV A, R5
	
	CLR RS0
	CLR RS1
	MOV R6, A
	
	CLR RS0
	CLR RS1
	MOV R5, #0
	
	CLR RS0
	CLR RS1
	MOV A, R4
	
	CLR RS0
	CLR RS1
	MOV R5, A
	
	CLR RS0
	CLR RS1
	MOV R4, #0
	
	CLR RS0
	CLR RS1
	MOV A, R3
	
	CLR RS0
	CLR RS1
	MOV R4, A
	
	CLR RS0
	CLR RS1
	MOV R3, #0
	
	CLR RS0
	CLR RS1
	MOV A, R2
	
	CLR RS0
	CLR RS1
	MOV R3, A
	
	CLR RS0
	CLR RS1
	MOV R2, #0
	
	CLR RS0
	CLR RS1
	MOV A, R1
	
	CLR RS0
	CLR RS1
	MOV R2, A
	
	CLR RS0
	CLR RS1
	MOV R1, #0
	
	CLR RS0
	CLR RS1
	MOV A, R0
	
	CLR RS0
	CLR RS1
	MOV R1, A
	
	CLR RS0
	CLR RS1
	MOV R0, #0
	
	RET

CHECK_COLLISION:	;確認下方是否有方塊
	PUSH ACC
	
	CLR RS0		;落下方塊到最底
	CLR RS1
	MOV A, R6
	JNZ PLACE_7
	
	CLR RS0		;有方塊
	CLR RS1
	MOV A, R5
	SETB RS0
	CLR RS1
	ANL A, R6
	JNZ PLACE_6
	
	CLR RS0
	CLR RS1
	MOV A, R4
	SETB RS0
	CLR RS1
	ANL A, R5
	JNZ PLACE_5
	
	CLR RS0
	CLR RS1
	MOV A, R3
	SETB RS0
	CLR RS1
	ANL A, R4
	JNZ PLACE_4
	
	CLR RS0
	CLR RS1
	MOV A, R2
	SETB RS0
	CLR RS1
	ANL A, R3
	JNZ PLACE_3
	
	CLR RS0
	CLR RS1
	MOV A, R1
	SETB RS0
	CLR RS1
	ANL A, R2
	JNZ PLACE_2
	
	ACALL UPDATE

	POP ACC
	
	RET

PLACE_7:	;將落下方塊變當前方塊
	SETB RS0
	CLR RS1
	ORL A, R6
	MOV R6, A
	CLR RS0
	CLR RS1
	MOV R6, #0

PLACE_6:
	CLR RS0
	CLR RS1
	MOV A, R5
	SETB RS0
	CLR RS1
	ORL A, R5
	MOV R5, A
	CLR RS0
	CLR RS1
	MOV R5, #0

PLACE_5:
	CLR RS0
	CLR RS1
	MOV A, R4
	SETB RS0
	CLR RS1
	ORL A, R4
	MOV R4, A
	CLR RS0
	CLR RS1
	MOV R4, #0

PLACE_4:
	CLR RS0
	CLR RS1
	MOV A, R3
	SETB RS0
	CLR RS1
	ORL A, R3
	MOV R3, A
	CLR RS0
	CLR RS1
	MOV R3, #0

PLACE_3:
	CLR RS0
	CLR RS1
	MOV A, R2
	SETB RS0
	CLR RS1
	ORL A, R2
	MOV R2, A
	CLR RS0
	CLR RS1
	MOV R2, #0

PLACE_2:
	CLR RS0
	CLR RS1
	MOV A, R1
	SETB RS0
	CLR RS1
	ORL A, R1
	MOV R1, A
	CLR RS0
	CLR RS1
	MOV R1, #0

PLACE_1:
	CLR RS0
	CLR RS1
	MOV A, R0
	SETB RS0
	CLR RS1
	ORL A, R0
	MOV R0, A
	CLR RS0
	CLR RS1
	MOV R0, #0
	
	ACALL GEN_TERIS	;產生新方塊
	POP ACC
	
	RET

GEN_TERIS:
	SETB RS0
	SETB RS1
	MOV A, R2
	MOVC A, @A+DPTR
	DEC A
	JZ SQUARE
	DEC A
	JZ RZ
	DEC A
	JZ LZ
	DEC A
	JZ LINE
	DEC A
	JZ LSEVEN
	DEC A
	JZ RSEVEN

SQUARE:
	CLR RS0
	CLR RS1
	MOV R0, #00001100B
	MOV R1, #00001100B
	MOV R2, #0
	
	SETB RS0
	SETB RS1
	INC R2
	MOV A, R2
	MOV B, #30
	DIV AB
	MOV R2, B
	
	RET

RZ:
	CLR RS0
	CLR RS1
	MOV R0, #00000110B
	MOV R1, #00001100B
	MOV R2, #0
	
	SETB RS0
	SETB RS1
	INC R2
	MOV A, R2
	MOV B, #30
	DIV AB
	MOV R2, B
	
	RET

LZ:
	CLR RS0
	CLR RS1
	MOV R0, #00001100B
	MOV R1, #00000110B
	MOV R2, #0
	
	SETB RS0
	SETB RS1
	INC R2
	MOV A, R2
	MOV B, #30
	DIV AB
	MOV R2, B
	
	RET

LINE:
	CLR RS0
	CLR RS1
	MOV R0, #00001110B
	MOV R1, #0
	MOV R2, #0
	
	SETB RS0
	SETB RS1
	INC R2
	MOV A, R2
	MOV B, #30
	DIV AB
	MOV R2, B
	
	RET

LSEVEN:
	CLR RS0
	CLR RS1
	MOV R0, #00001000B
	MOV R1, #00001110B
	MOV R2, #0
	
	SETB RS0
	SETB RS1
	INC R2
	MOV A, R2
	MOV B, #30
	DIV AB
	MOV R2, B
	
	RET

RSEVEN:
	CLR RS0
	CLR RS1
	MOV R0, #00000010B
	MOV R1, #00001110B
	MOV R2, #0
	
	SETB RS0
	SETB RS1
	INC R2
	MOV A, R2
	MOV B, #30
	DIV AB
	MOV R2, B
	
	RET

DELAY:
	SETB RS0
	SETB RS1
	MOV R6, #050H
DELAY1:
	SETB RS0
	SETB RS1
	MOV R7, #010H
DELAY2:
	SETB RS0
	SETB RS1
	DJNZ R7, $
	SETB RS0
	SETB RS1
	DJNZ R6, DELAY1
	RET

TETRIS:
	DB 1, 2, 3, 6, 3, 5, 4, 6, 3, 4, 1, 5, 1, 3, 2, 4, 6, 5, 4, 2, 3, 6, 5, 6, 1, 2, 4, 5, 2, 1
	
	END